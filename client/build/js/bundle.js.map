{"version":3,"sources":["webpack:///webpack/bootstrap 79c3bd032cd0e03db764","webpack:///./src/index.js","webpack:///./src/models/gamepiece.js","webpack:///./src/models/renderengine.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,wCAAuC;AACvC;AACA,MAAK;;AAEL;AACA,kCAAiC;AACjC;AACA,MAAK;;;AAGL;AACA;AACA;AACA,oBAAmB,QAAQ;AAC3B;AACA,sBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;;;;;;;AC7CA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,wBAAuB,uBAAuB;AAC9C,4BAA2B,0BAA0B;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA,wBAAuB,uBAAuB;AAC9C,4BAA2B,0BAA0B;;AAErD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAuB;AACvB;AACA;;AAEA;AACA;;AAEA;AACA;AACA,wBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA,wBAAuB,uBAAuB;AAC9C,4BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA,wBAAuB,kBAAkB;AACzC;AACA;AACA,6BAA4B;AAC5B;AACA;AACA,sBAAqB;AACrB,MAAK;;;;;AAKL;AACA;AACA,wBAAuB,QAAQ;AAC/B,4BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,uBAAsB;AACtB;AACA,MAAK;AACL;AACA;AACA,wBAAuB,uBAAuB;AAC9C,4BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA,0BAAyB,OAAO;AAChC;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;ACxLA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA,wBAAuB,kBAAkB;AACzC,4BAA2B,qBAAqB;AAChD;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,iBAAgB;AAChB,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,kBAAkB;AACzC;AACA,gCAA+B,qBAAqB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAgC;AAChC;AACA;AACA,KAAI;AACJ;AACA;AACA;AACA,uCAAsC;AACtC;AACA;AACA,KAAI","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 79c3bd032cd0e03db764\n **/","var GamePiece = require('./models/gamepiece.js');\nvar RenderEngine = require('./models/renderengine.js');\n\nwindow.onload = function(e) {\n    var rel = [\n        [2],\n        [2],\n        [2],\n        [2,3],\n        []\n    ];\n    var piece = new GamePiece(rel);\n\n    var board = generateArray();\n    var canvas = document.getElementById('gameboard');\n    var render = new RenderEngine(canvas, 600);\n\n    render.redraw(board);\n\n    console.log(render);\n\n    console.log(canvas);\n\n    canvas.addEventListener('click', function(e) {\n        var cPos = render.getMousePos(e);\n        board[cPos.y][cPos.x] = \"blue\"; // grab colour from current user\n        render.redraw(board, e);\n    });\n\n    canvas.addEventListener('mousemove', function(e) {\n        var userColour = \"green\"; // grab colour from current user\n        render.redraw(board, e, userColour, rel);\n    });\n\n\n};\nvar generateArray = function(){\n    var array = new Array(20);\n    for (var i = 0; i < 20; i++) {\n      array[i] = new Array(20);\n      for (var j = 0; j < 20; j++) {\n          array[i][j] = 'white';\n      }\n    }\n    return array;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/index.js\n ** module id = 0\n ** module chunks = 0\n **/","var GamePiece = function(tiles) {\n    this.relative = tiles;\n    this.array = this.generateArray();\n    this.setup(tiles);\n\n};\n\nGamePiece.prototype = {\n\n    setup: function(input) {\n        for (var array of input) {\n            if (array.length > 0) {\n                for (var element of array) {\n                    this.changeTile(element, input.indexOf(array), 1);\n                }\n            }\n        }\n    },\n    changeTile: function(x, y, value) {\n        this.array[y][x] = value;\n    },\n    corners: function(centerY, centerX) {\n        centerY = centerY - 2;\n        centerX = centerX - 2;\n        var corners = [];\n        for (var y = 0; y < this.array.length; y++) {\n            for (var x = 0; x < this.array[y].length; x++) {\n\n                if (this.array[y][x]) {\n                    if (this.array[y + 1]) {\n                        if (!this.array[y][x + 1] && !this.array[y + 1][x]) {\n                            corners.push([centerY + y + 1, centerX + x + 1]);\n                        }\n                        if (!this.array[y][x - 1] && !this.array[y + 1][x]) {\n                            corners.push([centerY + y + 1, centerX + x - 1]);\n                        }\n                    } else if (this.array[y + 1] === undefined) {\n                        if (!this.array[y][x + 1]) {\n                            corners.push([centerY + y + 1, centerX + x + 1]);\n                        }\n                        if (!this.array[y][x - 1]) {\n                            corners.push([centerY + y + 1, centerX + x - 1]);\n                        }\n                    }\n\n                    if (this.array[y - 1]) {\n                        if (!this.array[y][x + 1] && !this.array[y - 1][x]) {\n                            corners.push([centerY + y - 1, centerX + x + 1]);\n                        }\n                        if (!this.array[y][x - 1] && !this.array[y - 1][x]) {\n                            corners.push([centerY + y - 1, centerX + x - 1]);\n                        }\n                    } else if (this.array[y -1] === undefined) {\n                        if (!this.array[y][x + 1]) {\n                            corners.push([centerY + y - 1, centerX + x + 1]);\n                        }\n                        if (!this.array[y][x - 1]) {\n                            corners.push([centerY + y - 1, centerX + x - 1]);\n                        }\n                    }\n                }\n            }\n        }\n        return this.unique(corners);\n    },\n\n    flats: function(centerY, centerX) {\n        centerY = centerY - 2;\n        centerX = centerX - 2;\n        var flatsArray = [];\n        for (var y = 0; y < this.array.length; y++) {\n            for (var x = 0; x < this.array[y].length; x++) {\n\n                if (this.array[y][x]) {\n\n                      if (!this.array[y][x + 1]) {\n                          flatsArray.push([centerY + y, centerX + x + 1]);\n                      }\n\n                      if (!this.array[y][x - 1]) {\n                          flatsArray.push([centerY + y, centerX + x - 1]);\n                      }\n\n                      if (this.array[y + 1]){\n                        if (!this.array[y + 1][x] || this.array[y + 1][x] === undefined) {\n                          flatsArray.push([centerY + y + 1, centerX + x]);\n                        }\n                      }else{\n                        flatsArray.push([centerY + y + 1, centerX + x]);\n                      }\n\n                      if (this.array[y - 1]){\n                        if (!this.array[y - 1][x] || this.array[y - 1][x] === undefined) {\n\n                          flatsArray.push([centerY + y - 1, centerX + x]);\n                        }\n                      }else{\n                        flatsArray.push([centerY + y - 1, centerX + x]);\n                      }\n                }\n            }\n        }\n        return this.unique(flatsArray);\n    },\n\n    covered: function(centerY, centerX) {\n        centerY = centerY - 2;\n        centerX = centerX - 2;\n        coveredSquares = [];\n        for (var y = 0; y < this.array.length; y++) {\n            for (var x = 0; x < this.array[y].length; x++) {\n                if (this.array[y][x]) {\n                    coveredSquares.push([centerY + y, centerX + x]);\n                }\n            }\n        }\n        return coveredSquares;\n    },\n\n    unique: function(array){\n       var uniqueArray = [];\n       for (var item of array){\n          if (!this.isItemInArray(uniqueArray, item)){\n            uniqueArray.push(item);\n          }\n       }\n       return uniqueArray;\n    },\n\n  isItemInArray: function(array, item) {\n        for (var i = 0; i < array.length; i++) {\n            // This if statement depends on the format of your array\n            if (array[i][0] == item[0] && array[i][1] == item[1]) {\n                return true;   // Found it\n            }\n        }\n        return false;   // Not found\n    },\n\n\n\n\n    rotate: function() {\n        var rotatedArray = this.generateArray();\n        for (var x = 4; x > -1; x--) {\n            for (var y = 0; y < 5; y++) {\n                var newY = y - 4;\n                if (newY < 0) {\n                    newY = newY * -1;\n                }\n                rotatedArray[x][y] = this.array[newY][x];\n            }\n        }\n        this.array = rotatedArray;\n    },\n    flip: function() { // NOTE: do we want just vertical flip - do we want horizontal flip also\n        this.array = this.array.reverse();\n    }, // NOTE: horizontal flip could be done by rotate twice and then flip ( no new functions required)\n    getRel: function() {\n        var rel = [[],[],[],[],[]];\n        for (var y = 0; y < this.array.length; y++) {\n            for (var x = 0; x < this.array[y].length; x++) {\n                if (this.array[y][x]) {\n                    rel[y].push(x);\n                }\n            }\n        }\n        this.relative = rel;\n        return this.relative;\n    },\n    generateArray: function(){\n        var array = new Array(5);\n        for (var i = 0; i < 5; i++) {\n          array[i] = new Array(5);\n          for (var j = 0; j < 5; j++) {\n              array[i][j] = 0;\n\n          }\n\n        }\n        return array;\n    }\n\n};\nmodule.exports = GamePiece;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/models/gamepiece.js\n ** module id = 1\n ** module chunks = 0\n **/","var RenderEngine = function(element, heightWidth) {\n    this.canvas = element;\n    this.canvas.height = heightWidth;\n    this.canvas.width = heightWidth;\n    this.context = this.canvas.getContext('2d');\n    this.scale = heightWidth / 20;\n};\n\nRenderEngine.prototype = {\n    fillBox: function(x, y, colour) {\n        this.context.fillStyle = colour;\n        this.context.fillRect(x*this.scale, y*this.scale, this.scale, this.scale);\n    },\n    fillBoard: function(board) {\n        for (var y = 0; y < board.length; y++) {\n            for (var x = 0; x < board[y].length; x++) {\n                this.fillBox(x,y,board[y][x]);\n            }\n        }\n    },\n    getMousePos: function(e) {\n        var rect = this.canvas.getBoundingClientRect();\n        x = e.clientX - rect.left;\n        y = e.clientY - rect.top;\n        return {x: parseInt(x / this.scale), y: parseInt(y / this.scale)};\n    },\n    redraw: function(board, mouseEvent, userColour, piece) {\n        if (mouseEvent) {\n            var curPos = this.getMousePos(mouseEvent);\n        }\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        this.fillBoard(board);\n        if (curPos && piece) {\n            this.highlightBox(curPos, userColour, piece);\n        }\n        this.drawGrid();\n    },\n    highlightBox: function(pos, userColour, piece) {\n        this.context.beginPath();\n        this.context.strokeStyle = userColour;\n        this.context.lineWidth = this.scale / 5;\n        var x = pos.x - 2;\n        var y = pos.y - 2;\n        for (var i = 0; i < piece.length; i++) {\n            if (piece[i]) {\n                for (var j = 0; j < piece[i].length; j++) {\n                    this.drawBoxPart(x + piece[i][j], y+i, 'top');\n                    this.drawBoxPart(x + piece[i][j], y+i, 'bottom');\n                    this.drawBoxPart(x + piece[i][j], y+i, 'left');\n                    this.drawBoxPart(x + piece[i][j], y+i, 'right');\n                }\n            }\n        }\n        this.context.stroke();\n        this.context.lineWidth = 1;\n    },\n    drawBoxPart: function(x, y, box) {\n        x *= this.scale;\n        y *= this.scale;\n        switch (box) {\n            case 'top':\n                this.context.moveTo(x + 1, y + 1);\n                this.context.lineTo(x + (this.scale-1), y + 1);\n                break;\n            case 'left':\n                this.context.moveTo(x + 1, y + 1);\n                this.context.lineTo(x + 1, y + (this.scale-1));\n                break;\n            case 'right':\n                this.context.moveTo(x + (this.scale-1), y + 1);\n                this.context.lineTo(x + (this.scale-1), y + (this.scale-1));\n                break;\n            case 'bottom':\n                this.context.moveTo(x + 1, y + (this.scale-1));\n                this.context.lineTo(x + (this.scale-1), y + (this.scale-1));\n                break;\n        }\n    },\n    drawGrid: function() {\n        this.context.beginPath();\n        var i = 0;\n        while ( i <= this.canvas.width ) {\n            this.context.strokeStyle = \"black\";\n            this.context.moveTo(i,0);\n            this.context.lineTo(i, this.canvas.height);\n            this.context.moveTo(0,i);\n            this.context.lineTo(this.canvas.width, i);\n            i = i + this.scale;\n        }\n        this.context.stroke();\n    }\n};\n\nmodule.exports = RenderEngine;\n\n// canvas.addEventListener('mousemove', function(e) {\n//     var pieceRel = [\n//         [2],\n//         [2],\n//         [2],\n//         [2,3],\n//         []\n//     ];\n//     var userColour = \"green\"; // grab colour from current user\n//\n//     render.redraw(board, e, userColour, pieceRel);\n// });\n//\n// canvas.addEventListener('click', function(e) {\n//     var cPos = render.getMousePos(e);\n//     board[cPos.y][cPos.x] = \"blue\"; // grab colour from current user\n//     console.log(board);\n//     render.redraw(board, e);\n// });\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/models/renderengine.js\n ** module id = 2\n ** module chunks = 0\n **/"],"sourceRoot":""}